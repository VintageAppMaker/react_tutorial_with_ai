{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 6. Hook \n> Hook은 함수형 컴포넌트에서 React 기능(예: 상태 관리, 생명주기)을 사용할 수 있도록 해주는 특수한 함수\n\n** Hook의 규칙**\n\n* **최상위에서만 호출**: Hook은 루프, 조건문, 중첩 함수 내부에서 호출할 수 없다.\n* **React 함수 내에서만 호출**: Hook은 React 함수형 컴포넌트 또는 커스텀 Hook에서만 사용할 수 있다.\n\n##### **Hook의 장점**\n\n* 상태 관리와 로직 재사용이 간편\n* 클래스형 컴포넌트보다 코드가 간결하고 가독성이 좋다\n\n| **단계**   | **설명**                      |\n| -------- | --------------------------- |\n| **마운트**  | 컴포넌트가 생성되고 화면에 렌더링.         |\n| **업데이트** | 상태나 Props가 변경되어 화면이 다시 렌더링. |\n| **언마운트** | 컴포넌트가 DOM에서 제거.             |\n","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":"#### **Hook 사용하기**\n##### **(1) `useState`**\n\n`useState`는 컴포넌트의 상태를 관리하는 Hook.\n\n* 상태 변수와 상태를 업데이트하는 함수를 반환\n\n**예시: 상태 관리**\n\n```jsx\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0); // 초기 상태: 0\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\n##### **(2) `useEffect`**\n\n`useEffect`는 **생명주기와 관련된 로직**을 처리.\n\n* **마운트, 업데이트, 언마운트** 시 동작을 정의\n\n**예시: 마운트와 상태 변경**\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((prev) => prev + 1);\n    }, 1000);\n\n    // 정리 작업(언마운트 시 실행)\n    return () => clearInterval(interval);\n  }, []); // 빈 배열: 한 번만 실행\n\n  return <h1>Seconds: {seconds}</h1>;\n}\n\nexport default Timer;\n```\n\n**`useEffect`의 주요 포인트**:\n\n* **의존성 배열**:\n    * 배열이 비어 있으면(`[]`), 컴포넌트가 처음 렌더링될 때 한 번만 실행.\n    * 특정 값의 변화에만 실행되도록 설정 가능. 예: `[count]`.\n* **정리 함수**: 컴포넌트가 언마운트되거나 업데이트되기 직전에 실행.","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"\n#### **커스텀 Hook 만들기**\n\n커스텀 Hook은 **Hook 로직을 재사용**하기 위해 작성된 함수입니다.  \n이름은 반드시 **`use`**로 시작해야 하며, 다른 Hook들을 내부에서 사용할 수 있습니다.\n\n**예시: 커스텀 Hook으로 윈도우 크기 추적**\n\n```jsx\nimport { useState, useEffect } from \"react\";\n\nfunction useWindowSize() {\n  const [size, setSize] = useState({ width: window.innerWidth, height: window.innerHeight });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSize({ width: window.innerWidth, height: window.innerHeight });\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    // 정리 작업\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return size; // width와 height 반환\n}\n\nfunction App() {\n  const { width, height } = useWindowSize();\n\n  return (\n    <div>\n      <h1>Window Size</h1>\n      <p>Width: {width}px</p>\n      <p>Height: {height}px</p>\n    </div>\n  );\n}\n\nexport default App;\n```\n","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"\n\n| **Hook** | **역할** | **예시 사용** |\n| --- | --- | --- |\n| **`useState`** | 상태를 선언하고 관리. | `const [state, setState] = useState(0)` |\n| **`useEffect`** | 컴포넌트의 생명주기 로직 처리(마운트, 업데이트, 언마운트). | `useEffect(() => {...}, [deps])` |\n| **커스텀 Hook** | 로직 재사용 및 추상화. | `function useCustomHook() { ... }` |\n","x":-200,"y":1093,"width":540,"height":267}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. useState, useEffect"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2. 커스텀 Hook 만들기"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3. 정리"}
	]
}