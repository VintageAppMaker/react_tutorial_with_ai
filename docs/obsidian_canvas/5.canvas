{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 5. 생명주기 \n> React 컴포넌트는 생명주기는 크게 세 가지 단계로 구분된다\n\n1. **마운트(Mount)**: 컴포넌트가 처음 DOM에 추가\n2. **업데이트(Update)**: 상태(State)나 Props가 변경\n3. **언마운트(Unmount)**: 컴포넌트가 DOM에서 제거\n\n**생명주기 단계와 호출 메서드의 관계**:\n\n| **단계**   | **설명**                      |\n| -------- | --------------------------- |\n| **마운트**  | 컴포넌트가 생성되고 화면에 렌더링.         |\n| **업데이트** | 상태나 Props가 변경되어 화면이 다시 렌더링. |\n| **언마운트** | 컴포넌트가 DOM에서 제거.             |\n","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":"#### 1. **클래스형 컴포넌트에서 생명주기**\n##### **(1) 마운트 단계**\n\n* **`constructor()`**: 초기 상태를 설정하거나 Props를 초기화\n* **`componentDidMount()`**: 컴포넌트가 화면에 렌더링된 후 호출\n\t* API 호출 \n\t* 이벤트 리스너 등록 \n\t* 등에 사용\n\n```jsx\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  componentDidMount() {\n    console.log(\"Component has been mounted!\");\n  }\n\n  render() {\n    return <h1>Hello, world!</h1>;\n  }\n}\n```\n\n* * *\n\n##### **(2) 업데이트 단계**\n\n* **`shouldComponentUpdate()`**: 상태나 Props 변경 시 렌더링 여부를 결정. 성능 최적화에 사용.\n* **`componentDidUpdate()`**: 컴포넌트가 업데이트된 후 호출됩니다. 이전 상태와 현재 상태를 비교하여 후속 작업을 실행합니다.\n\n```jsx\ncomponentDidUpdate(prevProps, prevState) {\n  if (this.state.count !== prevState.count) {\n    console.log(\"Count has changed!\");\n  }\n}\n```\n\n* * *\n\n##### **(3) 언마운트 단계**\n\n* **`componentWillUnmount()`**: 컴포넌트가 DOM에서 제거되기 직전에 호출됩니다. 정리 작업(이벤트 리스너 제거, 타이머 정리 등)에 사용됩니다.\n\n```jsx\ncomponentWillUnmount() {\n  console.log(\"Component is being unmounted.\");\n}\n```\n","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"### 2. **함수형 컴포넌트와 생명주기**\n\n함수형 컴포넌트에서는 **React Hook**을 사용하여 생명주기 메서드를 대체할 수 있다.\n\n* **마운트 및 업데이트**: `useEffect()`를 사용\n* **언마운트**: `useEffect`에서 return 값에 정리 함수(cleanup)를 사용\n\n**예시**:\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  // 마운트와 업데이트\n  useEffect(() => {\n    console.log(\"Component mounted or updated\");\n\n    // 언마운트\n    return () => {\n      console.log(\"Component will unmount\");\n    };\n  }, [count]); // count가 변경될 때만 실행\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n```\n","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"\n| **단계**   | **클래스형 메서드**                                  | **함수형 대체(Hook)**                             | **설명**                    |\n| -------- | --------------------------------------------- | -------------------------------------------- | ------------------------- |\n| **마운트**  | `constructor`, `componentDidMount`            | `useEffect(() => {...}, [])`                 | 컴포넌트가 생성되어 DOM에 추가됨.      |\n| **업데이트** | `shouldComponentUpdate`, `componentDidUpdate` | `useEffect(() => {...}, [deps])`             | 상태나 Props가 변경되어 화면이 갱신됨.  |\n| **언마운트** | `componentWillUnmount`                        | `useEffect(() => {... return cleanup }, [])` | 컴포넌트가 DOM에서 제거되기 직전에 호출됨. |\n\n\n","x":-200,"y":1093,"width":540,"height":267}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. 클래스형 컴포넌트에서 생명주기"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2. 함수형 컴포넌트의 생명주기"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3. 정리"}
	]
}