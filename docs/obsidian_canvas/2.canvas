{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 2. 컴포넌트의 이해 \n> React 화면의 기초단위 \n\n- React 컴포넌트는 UI를 구성하는 \n\t- **재사용 가능한 코드 블록** \n\t- 애플리케이션을 작은 단위로 나눠 관리\n\t- 부모 자식 간의 데이터 전송(props)\n\t- 자신의 상태관리(state)\n\t- 함수형, 클래스형 컴포넌트 존재","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":"##### **함수형 컴포넌트**\n\n* JavaScript 함수처럼 동작하며, `props`를 받아 JSX를 반환\n* React Hook(`useState`, `useEffect` 등)을 사용하여 상태 및 생명주기를 관리\n\n**예시**:\n\n```jsx\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0); // 상태 관리\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"##### **클래스형 컴포넌트**\n\n* ES6 클래스 문법을 사용하여 작성\n* `state`와 생명주기 메서드(`componentDidMount`, `componentDidUpdate` 등)를 제공\n\n**예시**:\n\n```jsx\nimport React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 }; // 초기 상태\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 }); // 상태 업데이트\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Count: {this.state.count}</h1>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n```\n   ","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"\n\n| **특징** | **함수형 컴포넌트** | **클래스형 컴포넌트** |\n| --- | --- | --- |\n| 문법 | 함수로 정의 | 클래스 정의 및 `extends Component` 필요 |\n| 상태 관리 | `useState` Hook 사용 | `this.state`와 `setState` 사용 |\n| 생명주기 메서드 사용 | `useEffect`로 대체 | `componentDidMount` 등 사용 |\n| 가독성 | 간결하고 현대적 | 상대적으로 코드가 길고 복잡 |\n","x":-200,"y":1093,"width":540,"height":267},
		{"id":"a8ad24796e5e6b4d","type":"text","text":"\n\n#### ** 컴포넌트의 재사용**\n\nReact 컴포넌트는 **Props(속성)**를 활용하여 다양한 데이터를 동적으로 받아 재사용\n\n##### **예시: 재사용 가능한 버튼 컴포넌트**\n\n```jsx\nfunction Button({ label, onClick }) {\n  return <button onClick={onClick}>{label}</button>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Button label=\"확인\" onClick={() => alert(\"확인 클릭\")} />\n      <Button label=\"취소\" onClick={() => alert(\"취소 클릭\")} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n**결과**:\n\n* 동일한 `Button` 컴포넌트를 사용\n* `label`과 `onClick` 설정하여 다른 역할을 수행","x":540,"y":-320,"width":480,"height":360},
		{"id":"de1f7db3f96b1d1b","type":"text","text":"##### **Props를 활용한 동적 렌더링**\nProps를 통해 데이터를 전달하고 렌더링을 동적으로 변경.\n\n**예시: 사용자 카드 컴포넌트**:\n\n```jsx\nfunction UserCard({ name, age }) {\n  return (\n    <div>\n      <h2>{name}</h2>\n      <p>Age: {age}</p>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <UserCard name=\"Alice\" age={25} />\n      <UserCard name=\"Bob\" age={30} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n","x":540,"y":220,"width":480,"height":345},
		{"id":"3e7bde65ed082893","x":540,"y":705,"width":480,"height":375,"type":"text","text":"### 요약 표\n\n| **개념**        | **설명**                                               | **예시**                                            |\n| ------------- | ---------------------------------------------------- | ------------------------------------------------- |\n| **함수형 컴포넌트**  | 간결하고 현대적. Hook을 사용하여 상태 관리 및 생명주기 메서드 대체.            | `function Component() { return <div>...</div>; }` |\n| **클래스형 컴포넌트** | 클래스 문법을 사용하며, `this.state`와 생명주기 메서드를 제공.            | `class Component extends React.Component {...}`   |\n| **컴포넌트 재사용**  | Props를 사용하여 데이터를 동적으로 전달, 다양한 역할을 수행하도록 동일한 컴포넌트 사용. | `<Button label=\"확인\" onClick={...} />`             |\n\n* * *\n"}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. 함수형 컴포넌트"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2. 클래스형 컴포넌트"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3. 차이점 정리"},
		{"id":"49ddd2803823a1b4","fromNode":"95c770d4fe4eee17","fromSide":"right","toNode":"a8ad24796e5e6b4d","toSide":"left","label":"4.컴포넌트의\n재사용"},
		{"id":"26eea8907e90dd85","fromNode":"a8ad24796e5e6b4d","fromSide":"bottom","toNode":"de1f7db3f96b1d1b","toSide":"top","label":"5. props 활용"},
		{"id":"196793b3aab277c6","fromNode":"de1f7db3f96b1d1b","fromSide":"bottom","toNode":"3e7bde65ed082893","toSide":"top","label":"6.정리"}
	]
}