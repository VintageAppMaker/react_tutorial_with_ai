{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 3. Props와 State\n> 컴포넌트를 제어하기 위한 중요한 요소 \n\n- **Props**와 **State**는 컴포넌트 \n\t- 컴포넌트 간 데이터 흐름과 상태 관리를 위한 중요한 개념\n\t- 컴포넌트의 동작과 UI 렌더링을 제어","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":"\n#### **1. Props의 개념과 사용법**\n\n>Props(속성)은 컴포넌트 간 데이터를 전달하는 **읽기 전용 데이터**\n\n* 부모 컴포넌트 → 자식 컴포넌트로 데이터를 전달\n* **수정 불가**: Props는 전달된 데이터를 변경할 수 없다\n\n**예시: Props 사용**\n\n```jsx\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Greeting name=\"Alice\" />\n      <Greeting name=\"Bob\" />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n**출력 결과**:\n\n```\nHello, Alice!\nHello, Bob!\n```\n\n**Props의 특징**:\n\n* 부모에서 값을 전달하고 자식은 이를 사용하여 렌더링\n* Props는 동적 UI를 만드는 데 사용","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"\n#### **2. State의 개념과 관리**\n\n**State**는 컴포넌트의 **내부 데이터**를 관리.\n\n* 컴포넌트 내에서 값을 **읽거나 수정** 가능\n* 상태가 변경되면 컴포넌트가 **자동으로 다시 렌더링**\n\n**예시: State 사용**\n\n```jsx\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0); // 상태 초기화\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\n**출력 결과**:\n\n* 버튼 클릭 시 숫자가 증가하며 화면이 업데이트\n\n**State의 특징**:\n\n* 컴포넌트 내부에서 관리\n* `useState`(함수형 컴포넌트)나 `this.state`(클래스형 컴포넌트)를 사용하여 정의","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"\n#### **3. Props와 State의 차이**\n\n| **특징**       | **Props**                | **State**                            |\n| ------------ | ------------------------ | ------------------------------------ |\n| **정의**       | 부모 → 자식 간 데이터 전달.        | 컴포넌트 내부에서 관리되는 상태.                   |\n| **수정 가능 여부** | 읽기 전용, 수정 불가.            | 수정 가능 (`setState` 또는 `setCount` 사용). |\n| **관리 주체**    | 부모 컴포넌트가 값을 전달.          | 컴포넌트 내부에서 직접 관리.                     |\n| **재렌더링**     | Props 변경 시 자식 컴포넌트가 렌더링. | State 변경 시 해당 컴포넌트가 렌더링.             |\n| **사용 목적**    | 컴포넌트 간 데이터 전달.           | UI 동작(변화)을 관리.                       |\n","x":-200,"y":1093,"width":540,"height":267},
		{"id":"a8ad24796e5e6b4d","type":"text","text":"\n#### **4. Props와 State를 함께 사용하는 예시**\n\n**예시: Props와 State 통합**\n\n```jsx\nfunction Parent() {\n  const [message, setMessage] = useState(\"Hello\");\n\n  return (\n    <div>\n      <Child message={message} />\n      <button onClick={() => setMessage(\"Goodbye\")}>Change Message</button>\n    </div>\n  );\n}\n\nfunction Child({ message }) {\n  return <h1>{message}</h1>;\n}\n\nexport default Parent;\n```\n\n**설명**:\n\n1. `Parent` 컴포넌트는 `message`라는 상태를 관리\n2. `Child` 컴포넌트는 `message`를 Props로 받아 렌더링\n3. 버튼 클릭 시 상태가 변경되고, UI가 업데이트\n\n**출력 결과**:\n\n* 초기: `Hello`\n* 버튼 클릭 후: `Goodbye` ","x":540,"y":-320,"width":480,"height":360}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. Props"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2. State"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3.차이점 정리"},
		{"id":"49ddd2803823a1b4","fromNode":"95c770d4fe4eee17","fromSide":"right","toNode":"a8ad24796e5e6b4d","toSide":"left","label":"4.예제"}
	]
}