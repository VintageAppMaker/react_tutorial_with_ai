{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 7. Router \n> 패키지를 설치해야 사용가능함\n\n\nReact Router는 **BrowserRouter**, **Routes**, **Route**와 같은 구성 요소를 사용하여 라우팅을 설정.\n\n##### **설치**\n\n```bash\nnpm install react-router-dom\n```\n.\n\n","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":"#### **기본 구조**\n\n`BrowserRouter`로 애플리케이션 전체를 감싸고, `Routes` 내에 여러 개의 `Route`를 정의.\n\n**예제: 기본 라우팅**\n\n```jsx\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction Home() {\n  return <h1>Home Page</h1>;\n}\n\nfunction About() {\n  return <h1>About Page</h1>;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Home</Link> | <Link to=\"/about\">About</Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n##### **코드 설명**\n\n1. **`Router`**: 전체 애플리케이션을 감싸며, 라우팅 기능을 제공\n2. **`Link`**: 사용자 인터페이스에서 경로를 이동 설정\n3. **`Routes`와 `Route`**:\n    * **`Routes`**: 여러 `Route`를 그룹화\n    * **`Route`**: URL 경로와 해당 경로에 렌더링 컴포넌트 정의","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"\n#### **동적 라우팅**\n\n```jsx\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, useParams } from \"react-router-dom\";\n\nfunction User() {\n  const { userId } = useParams();\n  return <h1>User ID: {userId}</h1>;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/user/:userId\" element={<User />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n**설명**:\n\n* `:userId`는 동적 경로로, 경로의 일부를 변수처럼 처리합니다.\n* `useParams()`를 사용하여 URL의 동적 값을 가져옵니다.\n\n\n#### 버튼 클릭 시, 이동\n- useNavigate 사용\n\n```javascript\n// App.js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\n\nfunction Home() {\n  const navigate = useNavigate();\n\n  const goToAbout = () => {\n    navigate('/about');\n  };\n\n  return (\n    <div>\n      <h2>Home Page</h2>\n      <button onClick={goToAbout}>Go to About</button>\n    </div>\n  );\n}\n\nfunction About() {\n  return <h2>About Page</h2>;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n\n```","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"\n| **구성 요소** | **역할** | **예시** |\n| --- | --- | --- |\n| **`BrowserRouter`** | 라우팅의 기본 컨테이너로 사용. | `<BrowserRouter>...</BrowserRouter>` |\n| **`Routes`** | 라우트를 그룹화. | `<Routes> <Route ... /> </Routes>` |\n| **`Route`** | URL 경로와 컴포넌트를 매핑. | `<Route path=\"/\" element={<Home />} />` |\n| **`Link`** | 클라이언트 사이드 내비게이션을 제공. | `<Link to=\"/about\">About</Link>` |\n| **`useParams`** | URL에서 동적 값을 추출. | `const { id } = useParams();` |\n","x":-200,"y":1093,"width":540,"height":267}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. 기본구조"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2.동적 라우팅"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3. 정리"}
	]
}