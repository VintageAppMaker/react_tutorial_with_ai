{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 1. 기초와 설치 \n> React를 배우기 위한 `최소한의 지식` 정리\n\n- React는 **Facebook**에서 개발한 **JavaScript 라이브러리**로, **사용자 인터페이스(UI)**를 구축 목적(2013)  \n- 웹, 모바일, 데스크톱 애플리케이션 개발에 모두 활용 가능\n- **싱글 페이지 애플리케이션(SPA)** 개발에 강점","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":"1. **컴포넌트**: \n\t1. React의 기본 단위\n\t2. 재사용 가능한 UI 조각\n2. **JSX**: JavaScript와 HTML을 혼합한 문법\n3. **Props**: 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 방법\n4. **State**: 컴포넌트 내부에서 데이터 상태를 관리","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"#### **React의 주요 특징**\n\n1. **컴포넌트 기반 개발**\n    \n    - UI를 **컴포넌트**라는 작은 단위로 나눠서 개발\n    - 재사용성과 유지보수성이 우수 \n    ```text\n    App (전체 애플리케이션)\n    ├── Header (헤더 컴포넌트)\n    ├── Content (내용 컴포넌트)\n    └── Footer (푸터 컴포넌트)\n    ```\n    **예시: 컴포넌트 구조**\n    \n    ```jsx\n    const element = <h1>Hello, React!</h1>;\n    ```\n    \n    - 실제 DOM 대신 **가상 DOM**을 사용하여 변경 사항만 업데이트\n    - 변경 감지가 빨라 성능이 우수  \n        **비교**:\n        - **전통적 DOM 조작**\n            - 전체 DOM을 다시 그리기\n            - 느리고 비효율적\n        - **React의 가상 DOM**\n            - 변경된 부분만 업데이트\n            - 빠르고 효율적\n3. **단방향 데이터 흐름**\n    \n    - 부모 → 자식으로 데이터가 전달(Props)\n    - 데이터의 흐름이 명확하여 디버깅이 쉬움 \n4. **JSX (JavaScript XML)**\n    \n    - HTML과 유사한 문법으로, JavaScript에서 UI를 작성  \n        **JSX 예시**:\n```jsx\nconst element = <h1>Hello, React!</h1>;\n```","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"### 설치 \n#### **1. Node.js 및 npm 설치**\n\nNode.js는 React 애플리케이션 실행에 필요한 JavaScript 런타임 환경이며, npm은 패키지 관리를 위한 도구\n\n1. **Node.js 설치**:\n    * [Node.js 공식 웹사이트](https://nodejs.org/)에서 LTS(Long Term Support) 버전을 다운로드하여 설치\n    * 설치가 완료되면, 터미널 또는 명령 프롬프트에서 다음 명령어를 입력하여 설치를 확인\n        \n        ```bash\n        node -v   # Node.js 버전 확인\n        npm -v    # npm 버전 확인\n        ```\n        \n\n* * *\n\n#### **2. React 프로젝트 생성 (create-react-app)**\n\nReact 프로젝트를 가장 쉽게 생성하는 방법은 **create-react-app**을 사용하는 것\n\n1. **React 앱 생성**:\n    \n    * 터미널에서 아래 명령어를 입력:\n        \n        ```bash\n        npx create-react-app my-react-app\n        cd my-react-app\n        npm start\n        ```\n        \n        **명령어 설명**:\n        * `npx`: npm 5.2 이상에서 제공되는 명령어 실행 도구\n        * `create-react-app`: React 앱의 기본 설정을 자동으로 구성\n        * `my-react-app`: 생성될 프로젝트 디렉토리 이름\n2. **앱 실행**:\n    \n    * 명령어 `npm start`를 입력하면 브라우저에서 `http://localhost:3000`이 열리며 React 애플리케이션이 실행\n#### **3. 디렉토리 구조 이해**\n\nReact 프로젝트를 생성하면 다음과 같은 디렉토리 구조가 기본적으로 생성\n\n```text\nmy-react-app/\n├── node_modules/       # 설치된 의존성 모듈\n├── public/             # 정적 파일 (HTML, 이미지 등)\n│   └── index.html      # React 애플리케이션의 진입점\n├── src/                # 소스 코드 디렉토리\n│   ├── App.css         # App 컴포넌트 스타일\n│   ├── App.js          # App 컴포넌트 (메인 컴포넌트)\n│   ├── index.css       # 전역 스타일\n│   └── index.js        # React의 진입점\n├── .gitignore          # Git에서 무시할 파일 목록\n├── package.json        # 프로젝트 설정 및 의존성 목록\n└── README.md           # 프로젝트 설명 파일\n```\n\n* * *\n\n#### **React 주요 파일 설명**\n\n| **파일/폴더** | **역할** |\n| --- | --- |\n| `public/index.html` | React 애플리케이션의 기본 HTML 파일. 모든 컴포넌트가 이 파일에 렌더링됨. |\n| `src/index.js` | React의 진입점. `App` 컴포넌트를 렌더링하는 역할을 함. |\n| `src/App.js` | 애플리케이션의 메인 컴포넌트. UI 설계를 시작하는 파일. |\n","x":-200,"y":1093,"width":540,"height":527},
		{"id":"a8ad24796e5e6b4d","type":"text","text":"\n\n**JSX(JavaScript XML)**는 React에서 UI를 선언적으로 정의하기 위해 사용하는 문법. HTML과 유사하지만 JavaScript 코드와 결합되어 더 강력한 기능을 제공","x":540,"y":-187,"width":480,"height":105},
		{"id":"de1f7db3f96b1d1b","type":"text","text":"### JSX 문법 정리\n\n#### 1. 기본 구문\nJSX는 HTML과 유사한 태그를 사용하여 구성\n\n```jsx\nconst element = <h1>Hello, world!</h1>;\n```\n\n#### 2. JavaScript 표현식 삽입\n중괄호 `{}`를 사용하여 JSX 내에 JavaScript 표현식을 삽입할 수 있다.\n\n```jsx\nconst name = 'Josh';\nconst element = <h1>Hello, {name}</h1>;\n```\n\n#### 3. JSX는 표현식\nJSX는 JavaScript 표현식이므로 변수에 할당하거나 함수의 인수로 전달할 수 있다.\n\n```jsx\nfunction greeting(user) {\n  if (user) {\n    return <h1>Hello, {user.name}</h1>;\n  }\n  return <h1>Hello, Stranger</h1>;\n}\n```\n\n#### 4. HTML 태그와 React 컴포넌트 구별\nJSX에서 HTML 태그는 소문자로 시작하고, React 컴포넌트는 대문자로 시작.\n\n```jsx\nconst element = <div />;\nconst element = <MyComponent />;\n```\n\n#### 5. 속성\nJSX에서는 속성을 사용하여 요소에 정보를 전달할 수 있다. 속성 값이 JavaScript 표현식인 경우 중괄호 `{}`를 사용한다.\n\n```jsx\nconst element = <img src={user.avatarUrl} alt=\"User Avatar\" />;\n```\n\n#### 6. children\nJSX 태그 사이에 내용을 넣어 자식 요소를 정의할 수 있다.\n\n```jsx\nconst element = (\n  <div>\n    <h1>Hello</h1>\n    <h2>World</h2>\n  </div>\n);\n```\n\n#### 7. 조건부 렌더링\nJavaScript의 조건문을 사용하여 JSX 요소를 조건부로 렌더링할 수 있다.\n\n```jsx\nconst element = isLoggedIn ? <Dashboard /> : <Login />;\n```\n\n#### 8. 리스트와 키\n\n리스트를 렌더링할 때 고유한 `key` 속성을 사용하여 각 항목을 구분한다(`반드시 해야 한다`).\n\n```jsx\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n```\n\n#### 9. JSX와 CSS 클래스\n\nJSX에서는 `class` 대신 `className` 속성을 사용하여 CSS 클래스를 지정한다(예약어 충돌 때문).\n\n```jsx\nconst element = <div className=\"my-class\" />;\n```\n\n#### 10. 인라인 스타일\nJSX에서는 스타일 속성에 객체를 사용합니다. CSS 속성 이름은 camelCase로 작성한다. 만약 객체를 선언하고 사용하지 않는다면 {{속성}}과 같이 직접 객체를 정의하고 대입한다. \n\n```jsx\nconst divStyle = {\n  color: 'blue',\n  backgroundColor: 'lightgray'\n};\n\nconst element = <div style={divStyle}>Styled Text</div>;\n```\n\n#### 11. 주석\n\nJSX 내에서 주석을 작성할 때는 중괄호와 슬래시/별표를 사용한다.\n\n```jsx\nconst element = (\n  <div>\n    {/* This is a comment */}\n    <h1>Hello, world!</h1>\n  </div>\n);\n```\n","x":540,"y":35,"width":480,"height":345}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. 기초지식"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2. 주요특징"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3. 설치"},
		{"id":"49ddd2803823a1b4","fromNode":"95c770d4fe4eee17","fromSide":"right","toNode":"a8ad24796e5e6b4d","toSide":"left","label":"5.jsx의 이해"},
		{"id":"26eea8907e90dd85","fromNode":"a8ad24796e5e6b4d","fromSide":"bottom","toNode":"de1f7db3f96b1d1b","toSide":"top","label":"6. jsx 문법정리"}
	]
}