{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 8. context, redux \n> 전역적으로 상태관리  \n\n- **Context API**는 React에서 **전역 상태**를 관리 \n\t- props는 부모 자식 관계가 늘어날 수록 \n\t\t- 상태관리가 힘들어짐\n\t- 이에 대한 해결책\n- **Redux**는 React 애플리케이션에서 **예측 가능한 상태 관리**를 제공하는 외부 라이브러리\n\t- 모든 상태를 **스토어(store)**에 저장\n\t- 컴포넌트는 상태를 읽거나 수정\n##### **설치**\n\n```bash\nnpm install react-router-dom\n```\n.\n\n","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":"\n#### **Context API**\nReact에서 **전역 상태**를 관리할 수 있는 내장 기능입니다.  \n\n사용법 \n\n1. **Context 생성**: `React.createContext()`로 Context를 생성.\n2. **Provider 사용**: 상위 컴포넌트에서 Context의 값을 제공.\n3. **Consumer 또는 useContext 사용**: 하위 컴포넌트에서 Context의 값을 구독.\n#### **예제: 테마 전환**\n\n**App.js**\n\n```jsx\nimport React, { createContext, useState, useContext } from \"react\";\nimport ThemeToggle from \"./ThemeToggle\";\n\nconst ThemeContext = createContext(); // Context 생성\n\nfunction App() {\n  const [theme, setTheme] = useState(\"light\");\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      <div style={{ background: theme === \"light\" ? \"#fff\" : \"#333\", color: theme === \"light\" ? \"#000\" : \"#fff\", height: \"100vh\" }}>\n        <h1>{theme} Theme</h1>\n        <ThemeToggle />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = () => useContext(ThemeContext); // Custom Hook\nexport default App;\n```\n\n**ThemeToggle.js**\n\n```jsx\nimport React from \"react\";\nimport { useTheme } from \"./App\";\n\nfunction ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n  return (\n    <button onClick={toggleTheme}>\n      Switch to {theme === \"light\" ? \"Dark\" : \"Light\"} Theme\n    </button>\n  );\n}\n\nexport default ThemeToggle;\n```\n\n* * *\n\n#### **Context API의 장점과 단점**\n\n| **장점** | **단점** |\n| --- | --- |\n| 내장 기능으로 추가 설치 불필요 | 상태 변경 시 모든 하위 컴포넌트가 리렌더링 |\n| 작은 규모의 애플리케이션에 적합 | 복잡한 상태 관리에는 적합하지 않음 |\n","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"### **2. Redux의 기본 사용법**\n\n**Redux**는 React 애플리케이션에서 **예측 가능한 상태 관리**를 제공하는 외부 라이브러리입니다.  \nRedux는 모든 상태를 **스토어(store)**에 저장하고, 컴포넌트는 상태를 읽거나 수정할 수 있습니다.\n\n* * *\n\n#### **Redux의 주요 개념**\n\n1. **Store**: 애플리케이션의 상태를 저장.\n2. **Action**: 상태를 변경하기 위한 \"의도\"를 나타내는 객체.\n3. **Reducer**: 액션을 기반으로 상태를 업데이트하는 함수.\n4. **Dispatch**: 액션을 스토어에 전달하는 함수.\n\n* * *\n\n#### **Redux 설치**\n\n```bash\nnpm install redux react-redux\n```\n\n* * *\n\n#### **예제: 카운터 상태 관리**\n\n**store.js**\n\n```jsx\nimport { createStore } from \"redux\";\n\n// 초기 상태\nconst initialState = { count: 0 };\n\n// 리듀서\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, count: state.count + 1 };\n    case \"DECREMENT\":\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// 스토어 생성\nconst store = createStore(counterReducer);\nexport default store;\n```\n\n**App.js**\n\n```jsx\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Counter from \"./Counter\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Counter />\n    </Provider>\n  );\n}\n\nexport default App;\n```\n\n**Counter.js**\n\n```jsx\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Counter() {\n  const count = useSelector((state) => state.count); // 상태 읽기\n  const dispatch = useDispatch(); // 액션 디스패치\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => dispatch({ type: \"INCREMENT\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"DECREMENT\" })}>-</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\n* * *\n\n#### **Redux의 장점과 단점**\n\n| **장점** | **단점** |\n| --- | --- |\n| 상태를 중앙에서 관리, 일관성 유지 | 초기 설정이 복잡하고 코드가 길어짐 |\n| 디버깅 툴(Redux DevTools) 지원 | 작은 프로젝트에는 과도한 구조일 수 있음 |\n","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"### **Context API와 Redux 비교**\n\n| **특징** | **Context API** | **Redux** |\n| --- | --- | --- |\n| **복잡성** | 간단한 상태 관리에 적합 | 복잡한 상태 관리와 대규모 애플리케이션에 적합 |\n| **설치 필요 여부** | 불필요 | 추가 라이브러리 필요 |\n| **성능** | 상태 변경 시 모든 하위 컴포넌트 리렌더링 | 선택한 상태만 리렌더링 가능 |\n| **사용 예** | 테마, 사용자 인증 등 단순 전역 상태 관리 | 다양한 데이터의 구조화된 상태 관리 |\n","x":-200,"y":1093,"width":540,"height":267}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. Context API"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2.Redux"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3. 비교"}
	]
}