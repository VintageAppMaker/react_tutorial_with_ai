{
	"nodes":[
		{"id":"95c770d4fe4eee17","type":"text","text":"# 4. Event \n> 컴포넌트 내의 HTML 요소 이벤트처리\n\n- **camelCase**로 이벤트를 작성\n- 함수로 작성\n- 바인딩 작업","x":-200,"y":-300,"width":540,"height":330,"color":"4"},
		{"id":"09bdcd6874c2f62c","type":"text","text":" - 함수형 컴포넌트에서 처리 \n - 바인딩 필요없음\n```jsx\nfunction App() {\n  function handleClick() {\n    alert(\"Button clicked!\");\n  }\n\n  return <button onClick={handleClick}>Click me</button>;\n}\n\nexport default App;\n```\n","x":-200,"y":120,"width":540,"height":240},
		{"id":"e0896042eeaa4eb2","type":"text","text":"\n#### **2. 함수 바인딩**\n\n클래스형 컴포넌트에서는 함수에서 `this`를 사용하기 위해 바인딩이 필요.\n\n\n```jsx\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: \"Hello!\" };\n    this.handleClick = this.handleClick.bind(this); // 바인딩\n  }\n\n  handleClick() {\n    alert(this.state.message);\n  }\n\n  render() {\n    return <button onClick={this.handleClick}>Click me</button>;\n  }\n}\n```\n\n##### **화살표 함수 사용**\n\n화살표 함수는 바인딩을 자동으로 처리하므로 더 간결하게 작성할 수 있다.\n\n```jsx\nclass App extends React.Component {\n  state = { message: \"Hello!\" };\n\n  handleClick = () => {\n    alert(this.state.message);\n  };\n\n  render() {\n    return <button onClick={this.handleClick}>Click me</button>;\n  }\n}\n```\n","x":-200,"y":460,"width":540,"height":500},
		{"id":"e289348035d57526","type":"text","text":"#### 3. ** 이벤트 전달 **\n\n- 이벤트 핸들러에 매개변수를 전달하려면 화살표 함수를 사용\n- 익명의 함수를 구현하며 매개변수를 전송\n\n**예시**:\n\n```jsx\nfunction App() {\n  const handleClick = (name) => {\n    alert(`Hello, ${name}!`);\n  };\n\n  return (\n    <div>\n      <button onClick={() => handleClick(\"Alice\")}>Greet Alice</button>\n      <button onClick={() => handleClick(\"Bob\")}>Greet Bob</button>\n    </div>\n  );\n}\n```\n","x":-200,"y":1093,"width":540,"height":267},
		{"id":"a8ad24796e5e6b4d","type":"text","text":"\n\n| **개념**        | **설명**                                               | **예시**                                            |\n| ------------- | ---------------------------------------------------- | ------------------------------------------------- |\n| **이벤트 기본 구조** | React 이벤트는 camelCase로 작성. 함수 참조를 이벤트 핸들러로 전달.        | `<button onClick={handleClick}>Click me</button>` |\n| **함수 바인딩**    | 클래스형 컴포넌트에서 `this`를 바인딩하여 핸들러 사용. 함수형 컴포넌트는 바인딩 불필요. | `this.handleClick = this.handleClick.bind(this);` |\n| **상태 변경**     | 이벤트를 통해 컴포넌트의 상태를 업데이트 가능.                           | `setCount(count + 1)`                             |\n| **이벤트 전달**    | 매개변수를 전달하려면 화살표 함수를 사용.                              | `<button onClick={() => handleClick(name)}>...`   |\n","x":540,"y":-320,"width":480,"height":360}
	],
	"edges":[
		{"id":"d5108906830f9679","fromNode":"95c770d4fe4eee17","fromSide":"bottom","toNode":"09bdcd6874c2f62c","toSide":"top","label":"1. 간단한 이벤트처리"},
		{"id":"6776f1c001dcaeca","fromNode":"09bdcd6874c2f62c","fromSide":"bottom","toNode":"e0896042eeaa4eb2","toSide":"top","label":"2. 바인딩 필요경우"},
		{"id":"3b79f07222462511","fromNode":"e0896042eeaa4eb2","fromSide":"bottom","toNode":"e289348035d57526","toSide":"top","label":"3.이벤트에 값 전달"},
		{"id":"49ddd2803823a1b4","fromNode":"95c770d4fe4eee17","fromSide":"right","toNode":"a8ad24796e5e6b4d","toSide":"left","label":"4.요약"}
	]
}